from utils import euclidean_distancefrom datetime import datetimeclass Problem:    def __init__(self, initial=None, goal=None, **kwds):        self.__dict__.update(initial=initial, goal=goal, **kwds)    def actions(self, state):        raise NotImplementedError    def result(self, state, action):        raise NotImplementedError    def is_goal(self, state):        return state == self.goal    def action_cost(self, s, action, s1):        return 1    def h(self, node):        return 0class RouteProblem(Problem):    def __init__(self, initial, goal, map, traffic_conditions=None, start_time=None):        super().__init__(initial, goal, map=map)        self.traffic_conditions = traffic_conditions        self.start_time = start_time if start_time else datetime.now().time()        self.blocked_segments = set()    def actions(self, state):        return self.map.neighbors(state)    def result(self, state, action):        return action    def action_cost(self, s, action, s1):        km = self.map.get_distance(s, s1)        return (km / 20.0) * 60.0 if km is not None else float('inf')    def h(self, node):        return euclidean_distance(            self.map.locations[node.state],            self.map.locations[self.goal]        )